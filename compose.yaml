# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

networks:
  chatapp:
    driver: bridge
    attachable: true

services:
  server:
    build:
      context: .
    container_name: server-1-chatapp
    restart: no
    depends_on:
      - redis
      - mongodb
      - localtonet
    environment:
      HOST: 0.0.0.0
      NODE_ENV: production
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb-chatapp:27017/chatapp?authSource=${MONGO_INITDB_ROOT_USERNAME}
      REDIS_HOST: redis-chatapp
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
    volumes:
      - ./logs.txt:/usr/src/app/logs.txt
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - default

  mongodb:
    image: mongo:latest
    container_name: mongodb-chatapp
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adminpassword
    networks:
      - default

  redis:
    image: redis:latest
    container_name: redis-chatapp
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - default

  localtonet:
    image: localtonet/localtonet:latest
    container_name: localtonet-chatapp
    restart: unless-stopped
    env_file:
      - .env
    command: ["authtoken", "${LOCALTONET_TOKEN}"]
    networks:
      - default
